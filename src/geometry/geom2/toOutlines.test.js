const test = require('ava')

const { create, toString } = require('./index')

const { comparePoints } = require('../../../test/helpers')

const toOutlines = require('./toOutlines')

test('geom2: toOutlines() should return no paths for empty geom2', (t) => {
  let shp1 = create()
  let exp1 = []
  let ret1 = toOutlines(shp1)
  t.true(comparePoints(exp1, ret1))
})

test('geom2: toOutlines() should return paths for one or more outlines', (t) => {
  let shp1 = create([[[-1, -1], [ 1, -1]],
                    [[ 1, -1], [ 1,  1]],
                    [[ 1,  1], [-1, -1]]])
  let ret1 = toOutlines(shp1)
  let exp1 = [
    [[1, -1], [1, 1], [-1, -1]]
  ]
  t.true(comparePoints(exp1[0], ret1[0]))

  let shp2 = create([ [[-1, -1], [ 1, -1]],
                      [[ 1, -1], [ 1,  1]],
                      [[ 1,  1], [-1, -1]],
                      [[ 4,  4], [ 6,  4]],
                      [[ 6,  4], [ 6,  6]],
                      [[ 6,  6], [ 4,  4]] ])
  let ret2 = toOutlines(shp2)
  let exp2 = [
    [[1, -1], [1, 1], [-1, -1]],
    [[6, 4], [6, 6], [4, 4]]
  ]
  t.true(comparePoints(exp2, ret2))
})

test('geom2: toOutlines() should return paths for holes in geom2', (t) => {
  let shp1 = create([ [[ 10,  10], [-10, -10]],
                      [[-10, -10], [ 10, -10]],
                      [[ 10, -10], [ 10,  10]],
                      [[  5,  -5], [  6,  -4]],
                      [[  6,  -5], [  5,  -5]],
                      [[  6,  -4], [  6,  -5]] ])
  let ret1 = toOutlines(shp1)
  let exp1 = [
    [ [ -10, -10 ], [ 10, -10 ], [ 10, 10 ] ],
    [ [ 6, -4 ], [ 6, -5 ], [ 5, -5 ] ]
  ]
  t.true(comparePoints(exp1, ret1))

  let shp2 = create([ [[  6, -4], [  5, -5]],
                      [[  5, -5], [  6, -5]],
                      [[  6, -5], [  6, -4]],
                      [[ 10, 10], [-10,-10]],
                      [[-10,-10], [ 10,-10]],
                      [[ 10,-10], [ 10, 10]],
                      [[ -6, -8], [  8,  6]],
                      [[  8, -8], [ -6, -8]],
                      [[  8,  6], [  8, -8]] ])
  let ret2 = toOutlines(shp2)
  let exp2 = [
    [[5, -5], [6, -5], [6, -4]],
    [[-10, -10], [10, -10], [10, 10]],
    [[8, 6], [8, -8], [-6, -8]]
  ]
  t.true(comparePoints(exp2, ret2))
})

test.skip('geom2: toOutlines() should return paths for holes in geom2', (t) => {
  let shp1 = create([
    [[-49.30227,-14.68159], [-68.09793,-2.77271]],
    [[-68.09793,-2.77271], [-68.24754,-2.74623]],
    [[-68.24754,-2.74623], [-68.37258,-2.83253]],
    [[-68.37258,-2.83253], [-68.40090,-2.98181]],
    [[-68.40090,-2.98181], [-68.31615,-3.10790]],
    [[-68.31615,-3.10790], [-49.34037,-15.79733]],
    [[-49.34037,-15.79733], [-49.31861,-15.80155]],
    [[-49.31861,-15.80155], [-49.30706,-15.81530]],
    [[-49.30706,-15.81530], [-46.00506,-17.21109]],
    [[-46.00506,-17.21109], [-45.85940,-17.21503]],
    [[-45.85940,-17.21503], [-45.74972,-17.11909]],
    [[-45.74972,-17.11909], [-45.73425,-16.97420]],
    [[-45.73425,-16.97420], [-45.82119,-16.85727]],
    [[-45.82119,-16.85727], [-49.30332,-14.68094]], // NOT CLOSED

    [[-49.58573,-14.97553], [-49.53756,-15.18427]],
    [[-49.53756,-15.18427], [-54.61236,-11.79067]],
    [[-54.61236,-11.79067], [-49.58573,-14.97553]],

    [[-49.05727,-15.48662], [-49.10587,-15.27604]],
    [[-49.10587,-15.27604], [-48.16646,-15.86317]],
    [[-48.16646,-15.86317], [-49.05727,-15.48662]],
  ]
})

// touching edges
// touching holes

